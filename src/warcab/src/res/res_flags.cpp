/** \file
 * The SPWaW war cabinet - resource handling - nation flags.
 *
 * Copyright (C) 2005-2021 Erik Cumps <erik.cumps@gmail.com>
 *
 * License: GPL v2
 */

#include "resource.h"
#include "../common.h"

typedef unsigned long(* OOB_FLAG_cb)(void);

typedef struct s_OOB_FLAG_MAP {
	const char		*flagid;
	bool			usecb;
	union u_flag {
		unsigned long	rid;
		OOB_FLAG_cb	cb;
	}			flag;
} OOB_FLAG_MAP;

#define	OOBFLAGID(id_)		{ #id_, false, RID_OOB_FLAG_##id_ }
#define OOBFLAGCB(id_,cb_)	{ #id_, true, (unsigned long)cb_ }

static unsigned long
oob_flag_german_cross_spwaw (void)
{
	return (CFG_german_cross() ? RID_OOB_FLAG_SPWAW_GE_cross : RID_OOB_FLAG_SPWAW_GE_histo);
}

static unsigned long
oob_flag_german_cross_spww2 (void)
{
	return (CFG_german_cross() ? RID_OOB_FLAG_SPWW2_GE_cross : RID_OOB_FLAG_SPWW2_GE_histo);
}

static const OOB_FLAG_MAP flagmap[] = {
	/*** SPWAW flags ***/
	OOBFLAGID(SPWAW_CC),
	OOBFLAGID(SPWAW_CS),
	OOBFLAGID(SPWAW_PI),
	OOBFLAGID(SPWAW_NS),
	OOBFLAGID(SPWAW_RS),
	OOBFLAGID(SPWAW_BU),
	OOBFLAGCB(SPWAW_GE, oob_flag_german_cross_spwaw),
	OOBFLAGID(SPWAW_FI),
	OOBFLAGID(SPWAW_IT),
	OOBFLAGID(SPWAW_RO),
	OOBFLAGID(SPWAW_HU),
	OOBFLAGID(SPWAW_JA),
	OOBFLAGID(SPWAW_FR),
	OOBFLAGID(SPWAW_BR),
	OOBFLAGID(SPWAW_BE),
	OOBFLAGID(SPWAW_NL),
	OOBFLAGID(SPWAW_PO),
	OOBFLAGID(SPWAW_SO),
	OOBFLAGID(SPWAW_US),
	OOBFLAGID(SPWAW_USMC),
	OOBFLAGID(SPWAW_NC),
	OOBFLAGID(SPWAW_GK),
	OOBFLAGID(SPWAW_NOR),
	OOBFLAGID(SPWAW_YU),
	OOBFLAGID(SPWAW_CA),
	OOBFLAGID(SPWAW_IN),
	OOBFLAGID(SPWAW_ANZ),
	OOBFLAGID(SPWAW_FF),

	/*** SPWW2 flags ***/
	OOBFLAGID(SPWW2_ANZ),
	OOBFLAGID(SPWW2_BE),
	OOBFLAGID(SPWW2_BLU),
	OOBFLAGID(SPWW2_BR),
	OOBFLAGID(SPWW2_BU),
	OOBFLAGID(SPWW2_CA),
	OOBFLAGID(SPWW2_CC),
	OOBFLAGID(SPWW2_CS),
	OOBFLAGID(SPWW2_FF),
	OOBFLAGID(SPWW2_FI),
	OOBFLAGID(SPWW2_FR),
	OOBFLAGCB(SPWW2_GE, oob_flag_german_cross_spww2),
	OOBFLAGID(SPWW2_GE_emp),
	OOBFLAGID(SPWW2_GE_old),
	OOBFLAGID(SPWW2_GE_wmr),
	OOBFLAGID(SPWW2_GK),
	OOBFLAGID(SPWW2_GRN),
	OOBFLAGID(SPWW2_HU),
	OOBFLAGID(SPWW2_IN),
	OOBFLAGID(SPWW2_ISR),
	OOBFLAGID(SPWW2_IT),
	OOBFLAGID(SPWW2_JA),
	OOBFLAGID(SPWW2_LWP),
	OOBFLAGID(SPWW2_MN),
	OOBFLAGID(SPWW2_NC),
	OOBFLAGID(SPWW2_NL),
	OOBFLAGID(SPWW2_NOR),
	OOBFLAGID(SPWW2_NS),
	OOBFLAGID(SPWW2_NS_old),
	OOBFLAGID(SPWW2_PO),
	OOBFLAGID(SPWW2_RED),
	OOBFLAGID(SPWW2_RO),
	OOBFLAGID(SPWW2_RS),
	OOBFLAGID(SPWW2_RS_old),
	OOBFLAGID(SPWW2_SE),
	OOBFLAGID(SPWW2_SK),
	OOBFLAGID(SPWW2_SO),
	OOBFLAGID(SPWW2_THA),
	OOBFLAGID(SPWW2_USA),
	OOBFLAGID(SPWW2_USMC),
	OOBFLAGID(SPWW2_VFR),
	OOBFLAGID(SPWW2_YU),
	OOBFLAGID(SPWW2_YU_old),

	/*** SPMBT flags ***/
	OOBFLAGID(SPMBT_00),
	OOBFLAGID(SPMBT_AF_drep1),
	OOBFLAGID(SPMBT_AF_drep2),
	OOBFLAGID(SPMBT_AF_isl),
	OOBFLAGID(SPMBT_AF_kng),
	OOBFLAGID(SPMBT_AF_nor),
	OOBFLAGID(SPMBT_AF_rep1),
	OOBFLAGID(SPMBT_AF_rep2),
	OOBFLAGID(SPMBT_AF_sov),
	OOBFLAGID(SPMBT_AF_tal),
	OOBFLAGID(SPMBT_AL),
	OOBFLAGID(SPMBT_AO),
	OOBFLAGID(SPMBT_AR),
	OOBFLAGID(SPMBT_AT),
	OOBFLAGID(SPMBT_AU),
	OOBFLAGID(SPMBT_BA),
	OOBFLAGID(SPMBT_BA_old),
	OOBFLAGID(SPMBT_BE),
	OOBFLAGID(SPMBT_BG),
	OOBFLAGID(SPMBT_BR),
	OOBFLAGID(SPMBT_CA),
	OOBFLAGID(SPMBT_CA_old),
	OOBFLAGID(SPMBT_CCY),
	OOBFLAGID(SPMBT_CH),
	OOBFLAGID(SPMBT_CL),
	OOBFLAGID(SPMBT_CN),
	OOBFLAGID(SPMBT_CU),
	OOBFLAGID(SPMBT_CY),
	OOBFLAGID(SPMBT_CZ),
	OOBFLAGID(SPMBT_CZ_old),
	OOBFLAGID(SPMBT_DE),
	OOBFLAGID(SPMBT_DK),
	OOBFLAGID(SPMBT_DZ),
	OOBFLAGID(SPMBT_EC),
	OOBFLAGID(SPMBT_EDE),
	OOBFLAGID(SPMBT_EG),
	OOBFLAGID(SPMBT_EG_kng),
	OOBFLAGID(SPMBT_EG_rep),
	OOBFLAGID(SPMBT_EG_uar),
	OOBFLAGID(SPMBT_ER),
	OOBFLAGID(SPMBT_ES),
	OOBFLAGID(SPMBT_ES_old),
	OOBFLAGID(SPMBT_ET),
	OOBFLAGID(SPMBT_FI),
	OOBFLAGID(SPMBT_FR),
	OOBFLAGID(SPMBT_GB),
	OOBFLAGID(SPMBT_GE),
	OOBFLAGID(SPMBT_GE_old),
	OOBFLAGID(SPMBT_GR),
	OOBFLAGID(SPMBT_GRN),
	OOBFLAGID(SPMBT_GS),
	OOBFLAGID(SPMBT_HR),
	OOBFLAGID(SPMBT_HU),
	OOBFLAGID(SPMBT_ID),
	OOBFLAGID(SPMBT_IL),
	OOBFLAGID(SPMBT_IN),
	OOBFLAGID(SPMBT_IQ),
	OOBFLAGID(SPMBT_IQ_kng),
	OOBFLAGID(SPMBT_IQ_pst),
	OOBFLAGID(SPMBT_IQ_rep),
	OOBFLAGID(SPMBT_IR),
	OOBFLAGID(SPMBT_IR_old),
	OOBFLAGID(SPMBT_IT),
	OOBFLAGID(SPMBT_JO),
	OOBFLAGID(SPMBT_JP),
	OOBFLAGID(SPMBT_KE),
	OOBFLAGID(SPMBT_KE_old),
	OOBFLAGID(SPMBT_KH),
	OOBFLAGID(SPMBT_KP),
	OOBFLAGID(SPMBT_KR),
	OOBFLAGID(SPMBT_LB),
	OOBFLAGID(SPMBT_LY),
	OOBFLAGID(SPMBT_LY_kng),
	OOBFLAGID(SPMBT_LY_old),
	OOBFLAGID(SPMBT_LY_rep),
	OOBFLAGID(SPMBT_MJH),
	OOBFLAGID(SPMBT_MY),
	OOBFLAGID(SPMBT_MY_old),
	OOBFLAGID(SPMBT_MZ),
	OOBFLAGID(SPMBT_NG),
	OOBFLAGID(SPMBT_NI),
	OOBFLAGID(SPMBT_NL),
	OOBFLAGID(SPMBT_NO),
	OOBFLAGID(SPMBT_NVN),
	OOBFLAGID(SPMBT_PE),
	OOBFLAGID(SPMBT_PK),
	OOBFLAGID(SPMBT_PL),
	OOBFLAGID(SPMBT_PLO),
	OOBFLAGID(SPMBT_PT),
	OOBFLAGID(SPMBT_PY),
	OOBFLAGID(SPMBT_RED),
	OOBFLAGID(SPMBT_RHD),
	OOBFLAGID(SPMBT_RHD_old),
	OOBFLAGID(SPMBT_RHD_rep),
	OOBFLAGID(SPMBT_RHD_south),
	OOBFLAGID(SPMBT_RHD_zw),
	OOBFLAGID(SPMBT_RO),
	OOBFLAGID(SPMBT_RO_old),
	OOBFLAGID(SPMBT_RU),
	OOBFLAGID(SPMBT_RU_old),
	OOBFLAGID(SPMBT_SA),
	OOBFLAGID(SPMBT_SD),
	OOBFLAGID(SPMBT_SD_old),
	OOBFLAGID(SPMBT_SE),
	OOBFLAGID(SPMBT_SK),
	OOBFLAGID(SPMBT_SO),
	OOBFLAGID(SPMBT_SV),
	OOBFLAGID(SPMBT_SVN),
	OOBFLAGID(SPMBT_SY),
	OOBFLAGID(SPMBT_SY_rep),
	OOBFLAGID(SPMBT_SY_uar),
	OOBFLAGID(SPMBT_SYE),
	OOBFLAGID(SPMBT_TD),
	OOBFLAGID(SPMBT_TH),
	OOBFLAGID(SPMBT_TR),
	OOBFLAGID(SPMBT_TW),
	OOBFLAGID(SPMBT_TZ),
	OOBFLAGID(SPMBT_UA),
	OOBFLAGID(SPMBT_UG),
	OOBFLAGID(SPMBT_UN),
	OOBFLAGID(SPMBT_USA),
	OOBFLAGID(SPMBT_USMC),
	OOBFLAGID(SPMBT_UY),
	OOBFLAGID(SPMBT_VC),
	OOBFLAGID(SPMBT_VM),
	OOBFLAGID(SPMBT_YE),
	OOBFLAGID(SPMBT_YE_old),
	OOBFLAGID(SPMBT_YE_rep),
	OOBFLAGID(SPMBT_YU),
	OOBFLAGID(SPMBT_YU_rep),
	OOBFLAGID(SPMBT_YU_srb),
	OOBFLAGID(SPMBT_ZA),
	OOBFLAGID(SPMBT_ZA_old),
	OOBFLAGID(SPMBT_ZW),

	/*** unknown flag ***/
	{ 0, false, 0 }
};

QPixmap *
RES_flag (SPWAW_GAME_TYPE gametype, BYTE oob)
{
	return (RES_flagbyid (SPWAW_oob_flagid (gametype, oob)));
}

QPixmap *
RES_flagbyid (const char *flagid)
{
	int		i = 0;
	QPixmap		*pm = NULL;

	if (!flagid) {
		pm = RES_pixmap (RID_OOB_FLAG_SPWAW_00);
	} else {
		while (flagmap[i].flagid != 0) {
			if (strcmp (flagmap[i].flagid, flagid) == 0) break;
			i++;
		}
		if (flagmap[i].flagid != 0) {
			if (flagmap[i].usecb) {
				pm = RES_pixmap (flagmap[i].flag.cb());
			} else {
				pm = RES_pixmap (flagmap[i].flag.rid);
			}
		} else {
			pm = RES_pixmap (RID_OOB_FLAG_SPWAW_00);
		}
	}
	return (pm);
}